@using IoTHomeAssistant.Domain.Enums
@model List<IoTHomeAssistant.Domain.Entities.Widget>
@{ ViewData["Title"] = "Home Page"; }

@await Html.PartialAsync("_WidgetModal", Model)

@foreach (var area in Model.GroupBy(x => x.Area))
{
<h2 class="text-secondary font-weight-bold">@area.Key.Title</h2>
<div class="row">    
    @foreach (var widget in area.OrderBy(x => x.Order))
    {
        <div class="col-sm-12 col-md-6 col-xl-4 widget">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">@widget.Title</h4>
                    <ul class="list-group">
                        @foreach (var item in widget.Items)
                        {
                            <li class="list-group-item">
                                @if (item.Type == WidgetItemTypeEnum.Informer)
                                {
                                    <div>
                                        @await Html.PartialAsync("_DashboardIcon", item)
                                    </div>
                                    <div>
                                        <div class="card-title h3 text-uppercase">@item.Title</div>
                                        <div class="float-right h2 font-weight-bold text-success m-0 device-topic-@item.DeviceTopic.Id">
                                            <i class="load-text">Loading</i>
                                            <div class="loader">
                                                <span></span>
                                                <span></span>
                                                <span></span>
                                                <span></span>
                                            </div>
                                        </div>
                                    </div>
                                }
                                @if (item.Type == WidgetItemTypeEnum.Switcher)
                                {
                                    <div>
                                        @await Html.PartialAsync("_DashboardIcon", item)
                                        <span class="h5">@item.Title</span>
                                    </div>
                                    <div class="icon">
                                        <i class="fa fa-power-off text-secondary"></i>
                                    </div>
                                }
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }


<div class="col-sm-12 col-md-6 col-xl-4 widget">
    <div class="w-100">
        <a class="weatherwidget-io" href="https://forecast7.com/uk/48d2925d94/chernivtsi/" data-label_1="ЧЕРНІВЦІ" data-label_2="Погода" data-font="Roboto Slab" data-icons="Climacons Animated" data-theme="pure">ЧЕРНІВЦІ Погода</a>
        <script>
            !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = 'https://weatherwidget.io/js/widget.min.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'weatherwidget-io-js');
        </script>
    </div>
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Test Chart</h4>
            <div id="chartdiv" style="height: 300px"></div>
        </div>
    </div>
    <div class="w-100">
        <a class="weatherwidget-io" href="https://forecast7.com/uk/48d4425d77/kitsman/" data-label_1="КІЦМАНЬ" data-label_2="Погода" data-font="Roboto Slab" data-icons="Climacons Animated" data-theme="pure">КІЦМАНЬ Погода</a>
        <script>
            !function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0]; if (!d.getElementById(id)) { js = d.createElement(s); js.id = id; js.src = 'https://weatherwidget.io/js/widget.min.js'; fjs.parentNode.insertBefore(js, fjs); } }(document, 'script', 'weatherwidget-io-js');
        </script>
    </div>
</div>

</div>
}

@section Scripts {
    <script type="text/javascript">
    @foreach(var item in Model.SelectMany(x => x.Items))
    {
        <text>
        setupDeviceNotification(@item.DeviceTopic.Id);
        </text>
    }



        am4core.ready(function () {

            // Themes begin
            am4core.useTheme(am4themes_animated);
            // Themes end

            var chart = am4core.create("chartdiv", am4charts.XYChart);

            var data = [];

            chart.data = [{
                "year": "2014",
                "income": 23.5,
                "expenses": 21.1,
                "lineColor": chart.colors.next()
            }, {
                "year": "2015",
                "income": 26.2,
                "expenses": 30.5
            }, {
                "year": "2016",
                "income": 30.1,
                "expenses": 34.9
            }, {
                "year": "2017",
                "income": 20.5,
                "expenses": 23.1
            }, {
                "year": "2018",
                "income": 30.6,
                "expenses": 28.2,
                "lineColor": chart.colors.next()
            }, {
                "year": "2019",
                "income": 34.1,
                "expenses": 31.9
            }, {
                "year": "2020",
                "income": 34.1,
                "expenses": 31.9
            }, {
                "year": "2021",
                "income": 34.1,
                "expenses": 31.9,
                "lineColor": chart.colors.next()
            }, {
                "year": "2022",
                "income": 34.1,
                "expenses": 31.9
            }, {
                "year": "2023",
                "income": 34.1,
                "expenses": 31.9
            }, {
                "year": "2024",
                "income": 34.1,
                "expenses": 31.9
            }];

            var categoryAxis = chart.xAxes.push(new am4charts.CategoryAxis());
            categoryAxis.renderer.grid.template.location = 0;
            categoryAxis.renderer.ticks.template.disabled = true;
            categoryAxis.renderer.line.opacity = 0;
            categoryAxis.renderer.grid.template.disabled = true;
            categoryAxis.renderer.minGridDistance = 40;
            categoryAxis.dataFields.category = "year";
            categoryAxis.startLocation = 0.4;
            categoryAxis.endLocation = 0.6;


            var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
            valueAxis.tooltip.disabled = true;
            valueAxis.renderer.line.opacity = 0;
            valueAxis.renderer.ticks.template.disabled = true;
            valueAxis.min = 0;

            var lineSeries = chart.series.push(new am4charts.LineSeries());
            lineSeries.dataFields.categoryX = "year";
            lineSeries.dataFields.valueY = "income";
            lineSeries.tooltipText = "income: {valueY.value}";
            lineSeries.fillOpacity = 0.5;
            lineSeries.strokeWidth = 3;
            lineSeries.propertyFields.stroke = "lineColor";
            lineSeries.propertyFields.fill = "lineColor";

            var bullet = lineSeries.bullets.push(new am4charts.CircleBullet());
            bullet.circle.radius = 6;
            bullet.circle.fill = am4core.color("#fff");
            bullet.circle.strokeWidth = 3;

            chart.cursor = new am4charts.XYCursor();
            chart.cursor.behavior = "panX";
            chart.cursor.lineX.opacity = 0;
            chart.cursor.lineY.opacity = 0;

            chart.scrollbarX = new am4core.Scrollbar();
            chart.scrollbarX.parent = chart.bottomAxesContainer;

        }); // end am4core.ready()
    </script>
}

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#widgetModal">
    Launch demo modal
</button>


    <div class="col-sm-12 col-md-6 col-xl-4 widget">
        <div class="card">
            <div class="card-body">
                <h4 class="card-title">Lights</h4>
                <ul class="list-group">
                    <li class="list-group-item">
                        <div>
                            <svg class="icon-sprite text-secondary">
                                <use xlink:href="assets/images/icons-sprite.svg#bulb-eco" />
                            </svg>
                            <span class="h5">Main Light plus extra text</span>
                        </div>
                        <div class="icon">
                            <i class="fa fa-power-off text-secondary"></i>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div>
                            <svg class="icon-sprite">
                                <use xlink:href="assets/images/icons-sprite.svg#bulb-eco" />
                            </svg>
                            <span class="h5">Extra Light</span>
                        </div>
                        <div class="icon">
                            <i class="fa fa-power-off text-primary"></i>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="col-sm-12 col-md-6 col-xl-4">
        <div class="card" data-unit-group="switch-lights">
            <div class="card-body">
                <h3 class="card-title">Rosettes</h3>
            </div>
            <ul class="list-group list-group-flush">
                <li class="list-group-item d-flex active" data-unit="switch-light-1">
                    <svg class="icon-sprite" style="width: 2em; height: 2em; color: #ff7f5f">
                        <use xlink:href="assets/images/icons-sprite.svg#appliances" />
                    </svg>
                    <h5>Rosette 1</h5>
                    <label class="switch ml-auto checked">
                        <input type="checkbox" id="switch-light-1" checked>
                    </label>
                </li>
                <li class="list-group-item d-flex" data-unit="switch-light-2">
                    <svg class="icon-sprite" style="width: 2em; height: 2em;">
                        <use xlink:href="assets/images/icons-sprite.svg#appliances" />
                    </svg>
                    <h5>Rosette 2</h5>
                    <label class="switch ml-auto">
                        <input type="checkbox" id="switch-light-1" checked>
                    </label>
                </li>
                <li class="list-group-item d-flex" data-unit="switch-light-3">
                    <svg class="icon-sprite" style="width: 2em; height: 2em;">
                        <use xlink:href="assets/images/icons-sprite.svg#appliances" />
                    </svg>
                    <h5>Rosette 3</h5>
                    <label class="switch ml-auto">
                        <input type="checkbox" id="switch-light-1">
                    </label>
                </li>
            </ul>
            <div class="card-body">
                <div class="lights-controls" data-controls="switch-lights">
                    <button data-action="all-on" type="button" class="btn btn-secondary lights-control">All <strong>ON</strong></button>
                    <button data-action="all-off" type="button" class="btn btn-primary lights-control">All <strong>OFF</strong></button>
                </div>
            </div>
        </div>
    </div>
</div>
<br />