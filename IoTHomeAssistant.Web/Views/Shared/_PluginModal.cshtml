<div class="modal fade" id="pluginModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content p-0">
            <div class="widget-wrapper">
                <div id="left-side">
                    <ul>
                        <li class="conf-icon ml-4">
                            <i class="fa fa-cogs" aria-hidden="true" style="font-size: 120px;"></i>
                        </li>
                        <li class="conf-text" style="font-size: 36px;">
                            Configuration
                        </li>
                    </ul>
                </div>
                <div id="right-side">
                    <div class="main active" name_attr="main">
                        <h3>Add new Plugin</h3>
                        <hr/>
                        <div class="row">
                            <div class="col-6">
                                <div class="input-block shadow mt-1 required">
                                    <input type="hidden" value="0" name="plugin-id"/>
                                    <input placeholder="Title" name="title" type="text" class="form-control plg-title">
                                </div>
                            </div>
                            <div class="col-6 required">
                                <select data-style="bg-white shadow plg-type" class="w-100 selectpicker">
                                    <option value="">Select Type</option>
                                    @foreach (IoTHomeAssistant.Domain.Enums.DeviceTypeEnum type in Enum.GetValues(typeof(IoTHomeAssistant.Domain.Enums.DeviceTypeEnum)))
                                    {
                                        <option value="@((int)type)">@type</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <h5 class="mt-1">Configurations:</h5>
                        <div class="plg-confs">
                            <div class="row">
                                <input type="hidden" value="0" class="plg-conf-id"/>
                                <div class="col-4 required">
                                    <div class="input-block shadow mt-1">
                                        <input placeholder="Title" name="configurationTitle" type="text" class="form-control plg-conf-title">
                                    </div>
                                </div>
                                <div class="col-4  mt-1">
                                    <select class="plg-conf-type w-100 shadow form-control form-control-lg">
                                        <option  value="" selected="selected">Select Type</option>
                                        @foreach (IoTHomeAssistant.Domain.Enums.ConfigurationTypeEnum type in Enum.GetValues(typeof(IoTHomeAssistant.Domain.Enums.ConfigurationTypeEnum)))
                                        {
                                            <option value="@((int)type)">@type</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-3 required">
                                    <div class="input-block shadow mt-1">
                                        <input autocomplete="new-password" placeholder="Key" name="key" type="text" class="form-control plg-conf-key">
                                    </div>
                                </div>

                                <div class="col-1 pt-3 pl-2 rm-plg-conf" style="display: none;">
                                    <a href="#">
                                        <i class="fa fa-trash" style="font-size: 1.5em;" aria-hidden="true"></i>
                                    </a>
                                </div>
                                <div class="col-11">
                                    <div class="input-block shadow mt-1">
                                        <input placeholder="Description" name="description" type="text" class="form-control plg-conf-desc">
                                    </div>
                                </div>
                                <hr/>
                            </div>
                        </div>
                        <div class="row">

                            <div class="col-12 text-right pb-2" style="margin-top: 15px;margin-left: -1em;">
                                <a href="#" id="plg-add-new">Add</a>
                            </div>
                        </div>
                        <h5 class="mt-1">Docker Configuration:</h5>
                        <div class="row">
                            <div class="col-12">
                                <div class="input-block shadow mt-1 required">
                                    <input placeholder="Docker Image Source" name="dockerSource" type="text" class="form-control plg-docker-img">
                                </div>
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-12 btn-bottom">
                                <div class="float-right">
                                    <button class="btn btn-secondary mr-4 " id="cancelButton">Cancel</button>
                                    <button class="btn btn-primary" id="plg-save">&nbsp;Save&nbsp;</button>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var plugin = undefined;
    document.addEventListener('DOMContentLoaded', function () {
                function beforeShowModal() {
                    $('#pluginModal .main').removeClass('active');
                   
                    if (plugin != undefined) {
                        $('#pluginModal h3').text('Edit Task');
                        $('#pluginModal input[name=plugin-id]').val(plugin.id);
                        $('#pluginModal input[name=title]').val(plugin.title);
                        $("#pluginModal select").val(plugin.deviceType).change();
                       
                        $(".plg-confs .row:not(:first-child)").remove();

                        var configurations = plugin.configurations;
                        for(let i = 0; i < configurations.length; i++){
                            if (i !== 0){
                                 cloneConfigurationBlock();
                            }
                        }
                         $(".plg-confs .row").each(function (index) {
                             $('.plg-conf-id', this).val(configurations[index].id);
                             $('.plg-conf-title', this).val(configurations[index].title);
                             $('.plg-conf-desc', this).val(configurations[index].description)
                             $('.plg-conf-type', this).val(configurations[index].type).change()
                             $('.plg-conf-key', this).val(configurations[index].key);
                         })
                       
                        $('#pluginModal input[name=dockerSource]').val(plugin.dockerImageSource);
        
                        plugin = undefined;
                    } else {
                        $('#pluginModal h3').text('Add new Plugin');
                        $('#pluginModal input[name=plugin-id]').val('0');
                        $('#pluginModal input[name=title]').val('');
                        $("#pluginModal select").val(0).change();
                        $('#pluginModal input[name=dockerSource]').val('');
                        $(".plg-confs .row:not(:first-child)").remove();
                        $('.plg-conf-id').val(0);
                        $('.plg-conf-title').val("");
                        $('.plg-conf-key').val("");
                        $('.plg-conf-desc').val("");
                    }
        
                    $('#pluginModal .main').addClass('active');
                }
        
                $('#pluginModal').on('show.bs.modal', function () {
                   beforeShowModal();
                });
        
        $("#cancelButton").on('click', function (){
             $('#pluginModal').modal('toggle');
        })
                       
        $('#plg-add-new').on('click', function () {
          cloneConfigurationBlock();
        });

        $('#plg-save').on('click', function () {
            $('#plg-save').prop('disabled', true);
            var requires = $("#pluginModal .required:visible");
            var emptyFields = 0;

            requires.each(function () {
                var input = $('input, select, textarea', this);
                if (input && (input.val() == "" || input.val() == null)) {
                    $(this).addClass("vibration");
                    emptyFields++;
                }
            });

            if (emptyFields == 0) {
                var configurations = [];
                debugger;

                $(".plg-confs .row").each(function () {
                    configurations.push({
                        id: $('.plg-conf-id', this).val() || 0,
                        title: $('.plg-conf-title', this).val(),
                        key: $('.plg-conf-key', this).val(),
                        description: $('.plg-conf-desc', this).val(),
                        type : Number.parseInt($('.plg-conf-type', this).last().val()),
                    });
                });
                var plugin = {
                    id: $('#pluginModal input[name=plugin-id]').val(),
                    title: $('.plg-title').val(),
                    deviceType: Number.parseInt($('#pluginModal select').val()),
                    dockerImageSource: $('.plg-docker-img').val(),
                    configurations: configurations
                }

                $.ajax({
                    type: plugin.id === "0"? "POST": "PUT",
                    url: "/api/plugins",
                    data: JSON.stringify(plugin),
                    dataType: 'json',
                    contentType: 'application/json',
                });
                $('#pluginModal').modal('toggle');
                
            } else {
                setTimeout(function () {
                    $("#pluginModal .required").removeClass("vibration");
                    $('#plg-save').prop('disabled', false);
                }, 1500);
            }

        });
        
        $('.selectpicker').selectpicker();
    });
    
    function cloneConfigurationBlock(){
         var confBlock = $(".plg-confs .row:first-child").clone();
            $('input', confBlock).val('');
            $('.input-block label', confBlock).css({
                'top': '1.3em',
                'fontSize': '1.2em'
            });
                    
            $('.rm-plg-conf', confBlock).show();
            
            $('.rm-plg-conf a', confBlock).on('click', function () {
                if (confirm('Are you sure You want to delete the configuration?')) {
                    $(this).closest('.row').remove();
                }
            });
            
            confBlock.appendTo(".plg-confs");
    }

</script>