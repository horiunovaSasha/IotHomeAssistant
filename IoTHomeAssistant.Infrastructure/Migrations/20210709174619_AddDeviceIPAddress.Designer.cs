// <auto-generated />
using System;
using IoTHomeAssistant.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IoTHomeAssistant.Infrastructure.Migrations
{
    [DbContext(typeof(IoTDbContext))]
    [Migration("20210709174619_AddDeviceIPAddress")]
    partial class AddDeviceIPAddress
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.Property<int>("DevicesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DevicesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("DeviceDeviceGroup");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("VendorId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("DeviceGroup");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceMqttTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MqttBrokerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte>("TopicType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("MqttBrokerId");

                    b.ToTable("DeviceMqttTopic");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceVendor");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Icon");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.MqttBroker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseCredentials")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MqttBroker");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Widget");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceTopicId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IconColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IconId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WidgetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTopicId");

                    b.HasIndex("IconColorId");

                    b.HasIndex("IconId");

                    b.HasIndex("WidgetId");

                    b.ToTable("WidgetItem");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItemColorRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("ValueFrom")
                        .HasColumnType("REAL");

                    b.Property<float>("ValueTo")
                        .HasColumnType("REAL");

                    b.Property<int?>("WidgetItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("WidgetItemId");

                    b.ToTable("WidgetItemColorRange");
                });

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IoTHomeAssistant.Domain.Entities.DeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Device", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Area", "Area")
                        .WithMany("Devices")
                        .HasForeignKey("AreaId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.DeviceVendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Area");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceGroup", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Area", null)
                        .WithMany("DeviceGroups")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceMqttTopic", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Device", "Device")
                        .WithMany("Topics")
                        .HasForeignKey("DeviceId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.MqttBroker", "MqttBroker")
                        .WithMany()
                        .HasForeignKey("MqttBrokerId");

                    b.Navigation("Device");

                    b.Navigation("MqttBroker");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Widget", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Area", "Area")
                        .WithMany("Widgets")
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItem", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.DeviceMqttTopic", "DeviceTopic")
                        .WithMany()
                        .HasForeignKey("DeviceTopicId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.Color", "IconColor")
                        .WithMany()
                        .HasForeignKey("IconColorId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.Widget", "Widget")
                        .WithMany("Items")
                        .HasForeignKey("WidgetId");

                    b.Navigation("DeviceTopic");

                    b.Navigation("Icon");

                    b.Navigation("IconColor");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItemColorRange", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.WidgetItem", "WidgetItem")
                        .WithMany("ColorRange")
                        .HasForeignKey("WidgetItemId");

                    b.Navigation("Color");

                    b.Navigation("WidgetItem");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Area", b =>
                {
                    b.Navigation("DeviceGroups");

                    b.Navigation("Devices");

                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Device", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Widget", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItem", b =>
                {
                    b.Navigation("ColorRange");
                });
#pragma warning restore 612, 618
        }
    }
}
