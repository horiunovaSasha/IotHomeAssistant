// <auto-generated />
using System;
using IoTHomeAssistant.Infrastructure.EntityConfigurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IoTHomeAssistant.Infrastructure.Migrations
{
    [DbContext(typeof(IoTDbContext))]
    [Migration("20210819093456_Update-Plugin-entity-with-docker")]
    partial class UpdatePluginentitywithdocker
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.8");

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.Property<int>("DevicesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DevicesId", "GroupsId");

                    b.HasIndex("GroupsId");

                    b.ToTable("DeviceDeviceGroup");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IPAddress")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VendorId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("VendorId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("DeviceGroup");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceMqttTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MqttBrokerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte>("TopicType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("MqttBrokerId");

                    b.ToTable("DeviceMqttTopic");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceVendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceVendor");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Icon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Icon");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Succeed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.JobTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("JobTask");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.JobTaskCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Operation")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TriggeredEventId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TriggeredTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<float?>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("TriggeredTaskId");

                    b.ToTable("JobTaskCondition");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.JobTaskExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CommandId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TriggeredTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.Property<int?>("WaitSeconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("JobTaskId");

                    b.HasIndex("TriggeredTaskId");

                    b.ToTable("JobTaskExecution");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.MqttBroker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("UseCredentials")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MqttBroker");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Plugin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte>("DeviceType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DockerImageId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DockerImageSource")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Plugin");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.PluginConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int>("PluginId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PluginId");

                    b.ToTable("PluginConfiguration");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.PluginDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExtDeviceRef")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PluginId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PluginId");

                    b.ToTable("PluginDevice");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.PluginDeviceConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PluginConfigurationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PluginDeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PluginConfigurationId");

                    b.HasIndex("PluginDeviceId");

                    b.ToTable("PluginDeviceConfiguration");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AreaId")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Widget");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceTopicId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IconColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("IconId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WidgetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("DeviceTopicId");

                    b.HasIndex("IconColorId");

                    b.HasIndex("IconId");

                    b.HasIndex("WidgetId");

                    b.ToTable("WidgetItem");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItemColorRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("ValueFrom")
                        .HasColumnType("REAL");

                    b.Property<float>("ValueTo")
                        .HasColumnType("REAL");

                    b.Property<int?>("WidgetItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("WidgetItemId");

                    b.ToTable("WidgetItemColorRange");
                });

            modelBuilder.Entity("DeviceDeviceGroup", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Device", null)
                        .WithMany()
                        .HasForeignKey("DevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IoTHomeAssistant.Domain.Entities.DeviceGroup", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Device", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Area", "Area")
                        .WithMany("Devices")
                        .HasForeignKey("AreaId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.DeviceVendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");

                    b.Navigation("Area");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceGroup", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Area", null)
                        .WithMany("DeviceGroups")
                        .HasForeignKey("AreaId");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.DeviceMqttTopic", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Device", "Device")
                        .WithMany("Topics")
                        .HasForeignKey("DeviceId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.MqttBroker", "MqttBroker")
                        .WithMany()
                        .HasForeignKey("MqttBrokerId");

                    b.Navigation("Device");

                    b.Navigation("MqttBroker");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Job", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.JobTask", "JobTask")
                        .WithMany()
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobTask");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.JobTaskCondition", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.JobTask", "JobTask")
                        .WithMany("Conditions")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IoTHomeAssistant.Domain.Entities.JobTask", "TriggeredTask")
                        .WithMany()
                        .HasForeignKey("TriggeredTaskId");

                    b.Navigation("JobTask");

                    b.Navigation("TriggeredTask");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.JobTaskExecution", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.JobTask", "JobTask")
                        .WithMany("Executions")
                        .HasForeignKey("JobTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IoTHomeAssistant.Domain.Entities.JobTask", "TriggeredTask")
                        .WithMany()
                        .HasForeignKey("TriggeredTaskId");

                    b.Navigation("JobTask");

                    b.Navigation("TriggeredTask");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.PluginConfiguration", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Plugin", "Plugin")
                        .WithMany("Configurations")
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.PluginDevice", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IoTHomeAssistant.Domain.Entities.Plugin", "Plugin")
                        .WithMany()
                        .HasForeignKey("PluginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Plugin");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.PluginDeviceConfiguration", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.PluginConfiguration", "PluginConfiguration")
                        .WithMany()
                        .HasForeignKey("PluginConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IoTHomeAssistant.Domain.Entities.PluginDevice", "PluginDevice")
                        .WithMany("Configurations")
                        .HasForeignKey("PluginDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PluginConfiguration");

                    b.Navigation("PluginDevice");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Widget", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Area", "Area")
                        .WithMany("Widgets")
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItem", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.DeviceMqttTopic", "DeviceTopic")
                        .WithMany()
                        .HasForeignKey("DeviceTopicId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.Color", "IconColor")
                        .WithMany()
                        .HasForeignKey("IconColorId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.Icon", "Icon")
                        .WithMany()
                        .HasForeignKey("IconId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.Widget", "Widget")
                        .WithMany("Items")
                        .HasForeignKey("WidgetId");

                    b.Navigation("Device");

                    b.Navigation("DeviceTopic");

                    b.Navigation("Icon");

                    b.Navigation("IconColor");

                    b.Navigation("Widget");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItemColorRange", b =>
                {
                    b.HasOne("IoTHomeAssistant.Domain.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("IoTHomeAssistant.Domain.Entities.WidgetItem", "WidgetItem")
                        .WithMany("ColorRange")
                        .HasForeignKey("WidgetItemId");

                    b.Navigation("Color");

                    b.Navigation("WidgetItem");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Area", b =>
                {
                    b.Navigation("DeviceGroups");

                    b.Navigation("Devices");

                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Device", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.JobTask", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("Executions");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Plugin", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.PluginDevice", b =>
                {
                    b.Navigation("Configurations");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.Widget", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("IoTHomeAssistant.Domain.Entities.WidgetItem", b =>
                {
                    b.Navigation("ColorRange");
                });
#pragma warning restore 612, 618
        }
    }
}
